{"version":3,"sources":["component/NameForm.jsx","service/UserDataService.js","App.js","serviceWorker.js","index.js"],"names":["NameForm","name","email","axios","get","USER_QUERY_URL","props","state","id","handleNameChange","bind","handleEmailChange","handleSubmit","event","this","setState","target","value","preventDefault","alert","history","push","onSubmit","type","onChange","React","Component","ReactDOM","render","document","getElementById","style","color","margin","App","className","path","exact","component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAIMA,GCUS,I,yGALKC,EAAMC,GACpB,OAAOC,IAAMC,IAAIC,mCAAuBJ,O,kBDL5C,WAAYK,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACN,KAAM,GACNC,MAAO,GACPM,GAAG,IAGjB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATH,E,8EAaFG,GACfC,KAAKC,SAAS,CAACd,KAAMY,EAAMG,OAAOC,U,wCAGlBJ,GAChBC,KAAKC,SAAS,CAACb,MAAOW,EAAMG,OAAOC,U,mCAGxBJ,GAEXA,EAAMK,iBAFY,IAGVjB,EAASa,KAAKP,MAAdN,KACAC,EAAUY,KAAKP,MAAfL,MACRiB,MAAM,oCAAsClB,EAAO,IAAMC,GASzDY,KAAKR,MAAMc,QAAQC,KAAM,QAAUpB,EAAO,IAAMC,K,+BAIhD,OACE,0BAAMoB,SAAUR,KAAKF,cAClB,2CACA,6CACc,6BACX,2BAAOW,KAAK,OAAON,MAAOH,KAAKP,MAAMU,MAAQO,SAAUV,KAAKL,mBAF/D,IAEoF,8BAEpF,yCACU,6BACP,2BAAOc,KAAK,OAAON,MAAOH,KAAKP,MAAMU,MAAOO,SAAUV,KAAKH,oBAF9D,IAEoF,6BAAK,8BAGzF,2BAAOY,KAAK,SAASN,MAAM,gB,GApDbQ,IAAMC,YA0D7BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAGX9B,QE/Cf,IAAM+B,EAAQ,CACXC,MAAO,MACPC,OAAQ,QAGIC,EApBf,WACG,OACG,yBAAKC,UAAU,aACZ,kBAAC,IAAD,KACG,yBAAKA,UAAU,YACZ,wBAAIA,UAAU,cAAcJ,MAAOA,GAAnC,yBACA,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,UAAWtC,SCA/BuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNhB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d82f1b89.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport UserDataService from \"../service/UserDataService.js\";\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: '',\n                  email: '',\n                  id:''\n   };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.loadUser = this.saveUser.bind(this);\n  }\n  \n  handleNameChange(event) {\n    this.setState({name: event.target.value});\n  }\n  \n  handleEmailChange(event) {\n    this.setState({email: event.target.value});\n  }\n\n  handleSubmit(event) {\n    \n    event.preventDefault();\n    const { name } = this.state;\n    const { email } = this.state;\n    alert('A name and email were submitted: ' + name + ' ' + email);\n    /*UserDataService.retrieveUserInfo(name, email)\n      .then((res) => {\n         let user = res.data.result;\n         this.setState({\n            id: user.name\n         })\n      });\n    //const { id } = this.state;*/\n    this.props.history.push( \"user/\" + name + \"/\" + email);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}> \n         <h1> User Query</h1>\n         <label>\n            Full name: <br/>\n            <input type=\"text\" value={this.state.value}  onChange={this.handleNameChange} /> <br/>\n         </label>\n         <label>\n            Email: <br/>\n            <input type=\"text\" value={this.state.value} onChange={this.handleEmailChange} /> <br/><br/>\n         </label>\n         \n         <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nReactDOM.render(\n  <NameForm />,\n  document.getElementById('root')\n);\n\nexport default NameForm;\n","import axios from 'axios'\n\n//const USER_NAME = 'name' //This shoudl be the name entered by the user\n//const USER_EMAIL = 'email' //This should be the email entered by the user\nconst USER_QUERY_URL = 'http://localhost:5555/api/users'\n//const USER_INFO_URL = `${USER_QUERY_URL}/${USER_NAME}/${USER_EMAIL}`\n\nclass UserDataService {\n   \n   retrieveUserInfo(name, email) {\n      return axios.get(USER_QUERY_URL + '/' + name);\n   }\n}\n\nexport default new UserDataService()\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NameForm from './component/NameForm';\n\nfunction App() {\n   return (\n      <div className=\"container\">\n         <Router>\n            <div className=\"col-md-6\">\n               <h1 className=\"text-center\" style={style}>Lightweight Prototype</h1>\n               <Switch>\n                  <Route path=\"/\" exact component={NameForm}/>\n               </Switch>\n            </div>\n         </Router>\n      </div>\n   );\n}\n\nconst style = {\n   color: 'red',\n   margin: '10px'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}