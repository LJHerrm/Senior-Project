import React from 'react';
import ReactDOM from 'react-dom';
import { createOrder } from './util/APIFunctions';
import {
    NAME_MIN_LENGTH,
    NAME_MAX_LENGTH, 
    EMAIL_MAX_LENGTH,
    PASSWORD_MIN_LENGTH,
    PASSWORD_MAX_LENGTH
} from './constants';

import PhoneInput from 'react-phone-number-input/input';
import {Form, Input, Button, notification } from 'antd';
const FormItem = Form.Item;

class DeliveryInfo extends React.Component {
  constructor(props) {
    super(props);
    this.state = { 
    			   name:    { value: '' },
                   phone:   { value: '' },
                   address: { value: '' },
                   city: 	{ value: '' },
                   state: 	{ value: '' },
                   zipCode: { value: '' },
                   id:		{ value: '' }
   };

    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.isFormInvalid = this.isFormInvalid.bind(this);
    //this.loadUser = this.saveUser.bind(this);
  }
  
  /***********************************************************************************
   * State Handlers: These handlers set the states based on the given events. These
   * will corrspond to the user entries in the delivery form.
   ************************************************************************************/
   handleInputChange(event, validationFun) {
      const target = event.target;
      const inputName = target.name;
      const inputValue = target.value;
      
      this.setState ({
         [inputName] : {
            value: inputValue,
            ...validationFun(inputValue)
         }
      });
   }

  /*******************************************************************************************
   * Handler: handleSubmit() - This handler takes care of posting the order delivery
   * information to the API, which will in turn isert the relevan information to the 
   * database. 
   * Parameters: default submit event
   * Preconditions: All fields in the delivery forma must be filled out
   * Postcondition: An order will be created and all relevant order information will be inserted
   * into the database.
   ********************************************************************************************/
   handleSubmit(event) {
      event.preventDefault();
//      const { name } = this.state;
//      const { email } = this.state;
//      const { address } = this.state;
//      const { city } = this.state;
//      const { state } = this.state;
//      const { zipCode } = this.state;
//      const { phone } = this.state;
      const name  = this.state.name.value;
      const phone = this.state.phone.value;
      const address = this.state.address.value;
      const city = this.state.city.value;
	  const state = this.state.state.value;
	  const zipCode = this.state.zipCode.value;
      
      var addr_info = address.concat(' ', city, ' ', state, ' ', zipCode);
    
      //If the admin is logged in the payment type will always be cash. If a regular customer
      //is logged in the payment type will always be paypal. This will determine what page
      //we will go to. In future we need to store these values so we can use them once order is
      //placed in the payment page or the confirm your order page. Add a check to make sure all fields are submitted. 
      /*fetch('/api/orders/create', {
         method: 'POST',
         headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
         },
         body: JSON.stringify({
            address: addr_info,
            payment_type: 'cash',
            phone: phone,
            delivered: false,
            camp: 19,
            user_id: 1,
            product_id: 1
         })
      })*/
      //. This will ultimately go on the payment page, once the customer has paid for the products. Payment type will depend on user type, campaign will depend on the product or the current campaign? Before placing the order make sure payment went through correctly. So check response from paypal.
      const orderInfo = {
         address: addr_info,
         payment_type: 'cash',
         phone: phone,
         delivered: false,
         camp: 19,
         user_id: 1,
         product_id: 1
      };
      
      createOrder(orderInfo)
      .then(response => {
         notification.success({
            message: 'LCHS Band Fundraising',
            description: "Your order has been placed!"
         });
         this.props.history.push("/"); //for now will redirect to home, later to confirmation
      }).catch(error => {
         notification.error({
            message: 'LCHS Band Fundraising',
            description: error.message || 'Sorry! Something went wrong!'
         });
      });
   }

   isFormInvalid() {
   	return !(this.state.name.validateStatus === 'success' &&
   			 this.state.phone.validateStatus === 'success' &&
   			 this.state.address.validateStatus === 'success' &&
   			 this.state.city.validateStatus === 'success' &&
   			 this.state.state.validateStatus === 'success' &&
   			 this.state.zipCode.validateStatus === 'success'
   		);
   }
   

  render() {
    return (
      <Form align="center" onSubmit={this.handleSubmit} className="delivery-form"> 
      	<FormItem
      		label="Full Name"
      		validateStatus={this.state.name.validateStatus}
      		help={this.state.name.errorMsg}>
      		<Input
      			size="large"
      			name="name"
      			autoComplete="off"
      			placeholder="Your full name"
      			value={this.state.name.value}
      			onChange={(event) => this.handleInputChange(event, this.validateName)}/>
      	</FormItem>

      	<FormItem
      		label="Phone"
      		validateStatus={this.state.phone.validateStatus}
      		help={this.state.phone.errorMsg}>      	
			<PhoneInput
  				label="Phone"
  				placeholder="(###)###-####"
  				country="US"
  				value={ this.state.phone.value }
      			onChange={(event) => this.handleInputChange(event, this.validatePhone)}/>
       </FormItem>
      	

       <FormItem
      		label="Address"
      		validateStatus={this.state.address.validateStatus}
      		help={this.state.address.errorMsg}>
      		<Input
      			size="large"
      			name="address"
      			autoComplete="off"
      			placeholder="1234 Street Name"
      			value={this.state.address.value}
      			onChange={(event) => this.handleInputChange(event, this.validateAddress)}/>
      	</FormItem>
      	<FormItem
      		label="City"
      		validateStatus={this.state.city.validateStatus}
      		help={this.state.city.errorMsg}>
      		<Input
      			size="large"
      			name="city"
      			autoComplete="off"
      			placeholder="Your city"
      			value={this.state.city.value}
      			onChange={(event) => this.handleInputChange(event, this.validateCity)}/>
      	</FormItem>
      	<FormItem
      		label="State"
      		validateStatus={this.state.state.validateStatus}
      		help={this.state.state.errorMsg}>
      		<Input
      			size="large"
      			name="state"
      			autoComplete="off"
      			placeholder="Your state"
      			value={this.state.state.value}
      			onChange={(event) => this.handleInputChange(event, this.validateState)}/>
      	</FormItem>
      	<FormItem
      		label="Zip Code"
      		validateStatus={this.state.zipCode.validateStatus}
      		help={this.state.zipCode.errorMsg}>
      		<Input
      			size="large"
      			name="zipCode"
      			autoComplete="off"
      			placeholder="Zip code"
      			value={this.state.zipCode.value}
      			onChange={(event) => this.handleInputChange(event, this.validateZipcode)}/>
      	</FormItem>

        <FormItem>
            <Button type="primary"
               htmlType="submit"
               size="large"
               className="delivery-form-button">Continue</Button>
        </FormItem>
      </Form>
    );
  }

//VALIDATION FUCNTIONS

 validateName = (name) => {
 	if(name.length < NAME_MIN_LENGTH){
 		return{
 			validateStatus: 'error',
 			errorMsg: 'Name is too short (Minimum 4 characters needed.)'
 		}
 	} else if(name.length > NAME_MAX_LENGTH){
 		return{
 			validationStatus: 'error',
 			errorMsg: 'Name is too long (Maximum 40 characters allowed.)'
 		}
 	} else {
 		return{
 			validateStatus: 'success',
 			errorMsg: null,
 		};
 	}
 }

 validatePhone = (phone) => {
 	if(phone.length != 10){
 		return{
 			validateStatus: 'error',
 			errorMsg: 'Invalid phone number.'
 		}
 	} else {
 		return{
 			validationStatus: 'success',
 			errorMsg: null,
 			};
 		}
 	}
 		

 
 		

  
}

ReactDOM.render(
  <DeliveryInfo />,
  document.getElementById('root')
);

export default DeliveryInfo;
